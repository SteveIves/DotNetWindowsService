
import Microsoft.Extensions.Hosting
import Microsoft.Extensions
import Microsoft.Extensions.Logging
import System.Threading
import System.Threading.Tasks

namespace JokeService

    ;;; <summary>
    ;;; This is the main code that executes the functionality of the service.
    ;;; </summary>
    public sealed class JokeServiceBackgroundWorker extends BackgroundService

        ;;Utility objects provided via dependency injection
        private mJokeProvider, @JokeProvider
        private mLogger, @ILogger<JokeServiceBackgroundWorker>

        ;;; <summary>
        ;;; Constructor. Receives utility objects via dependency injection.
        ;;; </summary>
        ;;; <param name="aJokeService">Joke service instance</param>
        ;;; <param name="aLogger">Logger service instance</param>
        public method JokeServiceBackgroundWorker
            aJokeProvider, @JokeProvider
            aLogger, @ILogger<JokeServiceBackgroundWorker>
        proc
            mJokeProvider = aJokeProvider
            mLogger = aLogger
        endmethod

        ;;; <summary>
        ;;; This is the code that executes when the service starts.
        ;;; It should keep doing its thing until the service is stopped,
        ;;; which is indicated by the IsCancellationRequested property
        ;;; of the cancellation token.
        ;;; </summary>
        ;;; <param name="token">Cancellation token used to indicate the service needs to stop processing</param>
        ;;; <returns></returns>
        protected override async method ExecuteAsync, @Task
            required in token, CancellationToken
        proc
            try
            begin
                ;Main processing loop
                while (!token.IsCancellationRequested)
                begin
                    mLogger.LogWarning("{Joke}", mJokeProvider.GetJoke())
                    await Task.Delay(TimeSpan.FromSeconds(10), token)
                end
            end
            catch (ex, @TaskCanceledException)
            begin
                ; When the token is canceled, for example, a call made from services.msc,
                ; we shouldn't exit with a non-zero exit code. In other words, this is expected...
                nop
            end
            catch (ex, @Exception)
            begin
                mLogger.LogError(ex, ex.Message)

                ; Terminates this process and returns an exit code to the operating system.
                ; This is required to avoid the 'BackgroundServiceExceptionBehavior', which
                ; performs one of two scenarios:
                ; 1. When set to "Ignore": will do nothing at all, errors cause zombie services.
                ; 2. When set to "StopHost": will cleanly stop the host, and log errors.
                ;
                ; In order for the Windows Service Management system to leverage configured
                ; recovery options, we need to terminate the process with a non-zero exit code.
                Environment.Exit(1)
            end
            endtry
        endmethod

    endclass

endnamespace
