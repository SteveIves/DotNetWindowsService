
import Microsoft.Extensions.Hosting
import Microsoft.Extensions
import Microsoft.Extensions.Logging
import System.Threading
import System.Threading.Tasks

namespace JokeService

	public sealed class WindowsBackgroundService extends BackgroundService

        private _jokeService, @JokeService
        private _logger, @ILogger<WindowsBackgroundService>
	
        public method WindowsBackgroundService
            jokeService, @JokeService
            logger, @ILogger<WindowsBackgroundService>
        proc
            _jokeService = jokeService
            _logger = logger
        endmethod

        protected override async method ExecuteAsync, @Task
            required in token, CancellationToken
        proc
            try
            begin
                while (!token.IsCancellationRequested)
                begin
                    _logger.LogWarning("{Joke}", _jokeService.GetJoke())
                    await Task.Delay(TimeSpan.FromSeconds(10), token)
                end
            end
            catch (ex, @TaskCanceledException)
            begin
                ; When the token is canceled, for example, a call made from services.msc,
                ; we shouldn't exit with a non-zero exit code. In other words, this is expected...
            end
            catch (ex, @Exception)
            begin
                _logger.LogError(ex, ex.Message)

                ; Terminates this process and returns an exit code to the operating system.
                ; This is required to avoid the 'BackgroundServiceExceptionBehavior', which
                ; performs one of two scenarios:
                ; 1. When set to "Ignore": will do nothing at all, errors cause zombie services.
                ; 2. When set to "StopHost": will cleanly stop the host, and log errors.
                ;
                ; In order for the Windows Service Management system to leverage configured
                ; recovery options, we need to terminate the process with a non-zero exit code.
                Environment.Exit(1)
            end
            endtry
        endmethod

	endclass

endnamespace
